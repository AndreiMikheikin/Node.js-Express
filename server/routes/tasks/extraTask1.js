const express = require('express');
const fetch = require('node-fetch');
const router = express.Router();

router.post('/proxy', async (req, res) => {
  try {
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –≤ body –∑–∞–ø—Ä–æ—Å–∞' });
    }

    const { url, method = 'GET', headers = {}, body } = req.body;

    console.log('üì° –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å:', { method, url });

    if (!url || typeof url !== 'string') {
      return res.status(400).json({ error: 'URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' });
    }

    try {
      new URL(url);
    } catch (e) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL' });
    }

    const fetchOptions = {
      method: method.toUpperCase(),
      headers: {
        'Accept': 'application/json',
        ...headers
      }
    };

    if (body && !['GET', 'HEAD'].includes(method.toUpperCase())) {
      fetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);
    }

    const response = await fetch(url, fetchOptions);
    const contentType = response.headers.get('content-type') || 'application/octet-stream';

    if (contentType.startsWith('image/')) {
      if (contentType === 'image/svg+xml') {
        // SVG: —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        const svgText = await response.text();

        return res.json({
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries()),
          contentType,
          body: svgText
        });
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: —á–∏—Ç–∞–µ–º –∫–∞–∫ –±—É—Ñ–µ—Ä –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
        const buffer = await response.buffer();
        const base64 = buffer.toString('base64');

        return res.json({
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries()),
          contentType,
          body: `data:${contentType};base64,${base64}`
        });
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const responseBody = await response.text();

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      contentType,
      body: responseBody.length > 100 ? `${responseBody.substring(0, 100)}...` : responseBody
    });

    res.json({
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      contentType,
      body: responseBody
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    res.status(500).json({
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});

module.exports = router;
