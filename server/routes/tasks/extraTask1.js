const express = require('express');
const router = express.Router();

router.post('/proxy', async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –≤ body –∑–∞–ø—Ä–æ—Å–∞' });
    }

    const { url, method = 'GET', headers = {}, body } = req.body;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üì° –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å:', {
      method,
      url,
      headers,
      body: body && typeof body === 'object' ? '[object]' : body
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if (!url || typeof url !== 'string') {
      return res.status(400).json({ error: 'URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' });
    }

    try {
      new URL(url); // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    } catch (e) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL' });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
      method: method.toUpperCase(),
      headers: {
        'Accept': 'application/json',
        ...headers
      },
      timeout: 10000
    };

    if (body && !['GET', 'HEAD'].includes(method.toUpperCase())) {
      fetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const response = await fetch(url, fetchOptions);
    const contentType = response.headers.get('content-type') || 'application/octet-stream';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (contentType.startsWith('image/')) {
      const buffer = await response.arrayBuffer();
      return res.json({
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
        contentType,
        body: `data:${contentType};base64,${Buffer.from(buffer).toString('base64')}`
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const responseBody = await response.text();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      contentType,
      body: responseBody.length > 100 ? `${responseBody.substring(0, 100)}...` : responseBody
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    res.json({
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      contentType,
      body: responseBody
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    res.status(500).json({ 
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});

module.exports = router;