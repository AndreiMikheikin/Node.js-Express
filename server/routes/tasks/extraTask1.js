const express = require('express');
const router = express.Router();

router.post('/proxy', async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –≤ body –∑–∞–ø—Ä–æ—Å–∞' });
    }

    const { url, method = 'GET', headers = {}, body } = req.body;

    // üîç –õ–û–ì–ò–†–£–ï–ú –ü–†–ò–•–û–î–Ø–©–ò–ô –ó–ê–ü–†–û–°
    console.log('üì° –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å:');
    console.log('‚û°Ô∏è –ú–µ—Ç–æ–¥:', method);
    console.log('üåç URL:', url);
    console.log('üì¨ –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    console.log('üìù –¢–µ–ª–æ:', body);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!url || typeof url !== 'string') {
      return res.status(400).json({ error: '–ù—É–∂–µ–Ω URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ string' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
    let parsedUrl;
    try {
      parsedUrl = new URL(url);
    } catch (e) {
      return res.status(400).json({ error: '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL' });
    }

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const requestHeaders = {
      'Accept': 'application/json',
      ...headers
    };

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
      method: method.toUpperCase(),
      headers: requestHeaders,
      timeout: 10000
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ-GET –º–µ—Ç–æ–¥–æ–≤
    if (body && !['GET', 'HEAD'].includes(method.toUpperCase())) {
      fetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(url, fetchOptions);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    const responseBody = await response.text();
    const responseHeaders = {};
    response.headers.forEach((value, key) => {
      responseHeaders[key] = value;
    });

    // üîÅ –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('üì• –°—Ç–∞—Ç—É—Å:', response.status, response.statusText);
    console.log('üì¶ –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
    console.log('üìÑ Content-Type:', contentType);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.json({
      status: response.status,
      statusText: response.statusText,
      headers: responseHeaders,
      contentType: response.headers.get('content-type') || 'application/octet-stream',
      body: responseBody
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err);
    res.status(500).json({ 
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});

module.exports = router;