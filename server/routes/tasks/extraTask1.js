const express = require('express');
const router = express.Router();

// –î–ª—è fetch –≤ Node.js
const fetch = global //(...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

router.post('/proxy', async (req, res) => {
  try {
    const { url, method, headers, body } = req.body;

    // üîç –õ–û–ì–ò–†–£–ï–ú –ü–†–ò–•–û–î–Ø–©–ò–ô –ó–ê–ü–†–û–°
    console.log('üì° –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å:');
    console.log('‚û°Ô∏è –ú–µ—Ç–æ–¥:', method);
    console.log('üåç URL:', url);
    console.log('üì¨ –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    console.log('üìù –¢–µ–ª–æ:', body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (!url || !/^https?:\/\/.+/.test(url)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è fetch
    const fetchOptions = {
      method: method || 'GET',
      headers: headers || {},
    };

    if (body && method !== 'GET' && method !== 'HEAD') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Content-Type –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (
        headers['Content-Type']?.includes('application/json') ||
        headers['content-type']?.includes('application/json')
      ) {
        fetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);
      } else {
        fetchOptions.body = body;
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å
    const response = await fetch(url, fetchOptions);
    const contentType = response.headers.get('content-type') || '';
    let responseBody;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (contentType.includes('application/json')) {
      responseBody = await response.json();
    } else if (contentType.startsWith('image/')) {
      const buffer = await response.arrayBuffer();
      responseBody = Buffer.from(buffer).toString('base64');
    } else {
      responseBody = await response.text();
    }

    // üîÅ –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('üì• –°—Ç–∞—Ç—É—Å:', response.status, response.statusText);
    console.log('üì¶ –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
    console.log('üìÑ Content-Type:', contentType);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    res.json({
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      contentType,
      body: responseBody,
      isBase64Encoded: contentType.startsWith('image/')
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

module.exports = router;